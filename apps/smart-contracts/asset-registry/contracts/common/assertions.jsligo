#import "./errors.jsligo" "Errors"
#import "./tzip12.datatypes.jsligo" "TZIP12Datatypes"
#import "./tzip12.interfaces.jsligo" "TZIP12Interface"

/**
* Check if the Tx sender is the token's owner
* @param owner : the address of the actual owner
*/

export const assert_update_permission = (owner: address): unit => {
    return Assert.Error.assert(
        (owner == (Tezos.get_sender())),
        Errors.only_sender_manage_operators
    )
}

/**
* Check if the token id already exists
* @param assets : the assets already minted
* @param token_id : the token id to test 
*/

export const assert_asset_id_exists = (
    supply: nat,
) => {
    return Assert.Error.assert(
        supply == 0n,
        Errors.token_id_already_exists
    )
};

/**
* Check if the sender is allowed to mint
*/

export const assert_minting_allowed = (from_uuid: string, member_pkh: address, registry_address: address) => {
    // Check demim contract
    const permissionsOpt: option<bool> = Tezos.Next.View.call(
        "get_permissions",
        [from_uuid, member_pkh],
        registry_address
    );
    const permissions: bool = Option.value_with_error(Errors.minting_not_allowed, permissionsOpt);

    return Assert.Error.assert(
        permissions,
        Errors.minting_not_allowed
    )
}
